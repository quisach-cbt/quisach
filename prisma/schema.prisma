generator client {
    provider = "prisma-client"
    binaryTargets   = ["rhel-openssl-3.0.x", "native"]
    output   = "../src/lib/server/prisma"
    engineType = "binary"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String    @id @default(cuid())
    username        String    @unique
    displayName     String
    email           String    @unique
    emailVerifiedAt DateTime?
    password        String
    avatarUrl       String    @default("")
    role            Role      @default(USER)
    points          Int       @default(0)
    isBanned        Boolean   @default(false)
    banReason       String?

    profile  Profile?
    sessions Session[]
    accounts Account[]

    badges                  Badge[]
    achievements            Achievement[]
    constestants            Contestant[]
    posts                   Post[]
    postReactions           PostReaction[]
    postComments            PostComment[]
    organizationMember      OrganizationMember[]
    organizationInviteLink  OrganizationInviteLink[]
    organizationJoinRequest OrganizationJoinRequest[]
    followers               UserFollow[]              @relation("Followee")
    following               UserFollow[]              @relation("Follower")
    reposts                 PostRepost[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    books Book[] @relation("UserBooks")

    listings Listing[]

    Location Location[]

    Review Review[] @relation("ReviewedUser")

    Reviews Review[]
}

enum Role {
    ADMIN
    STAFF
    USER
}

model Account {
    userId            String
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    type              String
    provider          String
    providerAccountId String
    refreshToken      String?
    accessToken       String?
    expiresAt         Int?
    tokenType         String?
    scope             String?
    idToken           String?
    sessionState      String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([provider, providerAccountId])
}

model Session {
    sessionId String   @id
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expiresAt DateTime
}

model Profile {
    userId    String   @id @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    gender    Gender?
    bio       String?
    pronouns  String?
    location  String?
    website   String?
    theme     String?
    aboutMe   String?
    point     Int      @default(0)
    updatedAt DateTime @updatedAt
}

enum Gender {
    MALE
    FEMALE
    PREFER_NOT_TO_SAY
}

model UserFollow {
    followerId String
    followeeId String

    follower User @relation("Follower", fields: [followerId], references: [id])
    followee User @relation("Followee", fields: [followeeId], references: [id])

    @@unique([followerId, followeeId])
}

model Badge {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    name        String?
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Achievement {
    id          String   @id @default(cuid())
    users       User[]
    iconUrl     String
    color       String
    name        String
    description String
    createdAt   DateTime @default(now())
}

model Contest {
    id            String         @id @default(cuid())
    name          String
    startDate     DateTime
    endDate       DateTime
    format        String?
    type          String?
    visibility    String?
    contestDetail ContestDetail?
    contestants   Contestant[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ContestVisibility {
    UNPUBLISHED
    PUBLISHED
    PUBLIC
    PRIVATE
    RESTRICTED
}

model Contestant {
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    contest   Contest  @relation(fields: [contestId], references: [id])
    contestId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, contestId])
}

model ContestDetail {
    contestId   String   @id @unique
    contest     Contest  @relation(fields: [contestId], references: [id])
    description String?
    rules       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Post {
    id             String  @id @default(cuid())
    title          String
    content        String
    pinned         Boolean @default(false)
    authorId       String
    organizationId String?
    groupId        String?

    author       User           @relation(fields: [authorId], references: [id])
    visibility   PostVisibility @default(UNPUBLISHED)
    organization Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    reactions    PostReaction[]
    comments     PostComment[]
    tags         PostTag[]
    reposts      PostRepost[]

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

enum PostVisibility {
    UNPUBLISHED
    PUBLISHED
    PRIVATE
    PUBLIC
}

model PostReaction {
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId    String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, postId])
}

model PostTag {
    id          String  @id @default(cuid())
    name        String?
    description String?
    postId      String?
    posts       Post[]
    bgcolor     String?
    textcolor   String?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model PostComment {
    id        String   @id @default(cuid())
    authorId  String
    postId    String
    content   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    Post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostRepost {
    id     String @id @default(cuid())
    userId String
    postId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, postId])
    @@index([userId, postId])
}

model Organization {
    id                      String                    @id
    name                    String
    description             String?
    logoUrl                 String
    bannerUrl               String
    website                 String?
    isVerified              Boolean                   @default(false)
    storageUsage            Int                       @default(0) // In binary standard KB.
    storageLimit            Int                       @default(5242880) // 5242880 KB = 5GB
    OrganizationMember      OrganizationMember[]
    Post                    Post[]
    OrganizationJoinRequest OrganizationJoinRequest[]
    OrganizationInviteLink  OrganizationInviteLink[]
    createdAt               DateTime                  @default(now())
    updatedAt               DateTime                  @updatedAt
}

model OrganizationMember {
    id             String           @id @default(cuid())
    userId         String
    user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    organizationId String
    organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    role           OrganizationRole @default(MEMBER)
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt

    @@unique([userId, organizationId])
    @@index([organizationId])
}

enum OrganizationRole {
    ADMIN
    STAFF
    MEMBER
}

model OrganizationJoinRequest {
    id             String                        @id @default(cuid())
    userId         String
    user           User                          @relation(fields: [userId], references: [id])
    organizationId String
    organization   Organization                  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    status         OrganizationJoinRequestStatus @default(PENDING)
    createdAt      DateTime                      @default(now())

    @@unique([userId, organizationId])
    @@index([organizationId])
}

model OrganizationInviteLink {
    id             String       @id @default(cuid())
    userId         String
    user           User         @relation(fields: [userId], references: [id])
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    joinAmount     Int          @default(0)
    createdAt      DateTime     @default(now())
    expiredAt      DateTime     @default(dbgenerated("now() + interval '1 day'"))

    @@index([organizationId])
}

enum OrganizationJoinRequestStatus {
    PENDING
    ACCEPTED
    REJECTED
}

model Book {
    id          String    @id @default(cuid())
    title       String
    author      String
    isbn        String?   @unique
    publishedAt DateTime?
    description String?
    coverUrl    String?

    ownerId  String
    owner    User      @relation("UserBooks", fields: [ownerId], references: [id])
    listings Listing[]
}

model Listing {
    id        String        @id @default(cuid())
    status    ListingStatus @default(ACTIVE)
    createdAt DateTime      @default(now())

    // Relations
    bookId String
    book   Book   @relation(fields: [bookId], references: [id])
    userId String
    user   User   @relation(fields: [userId], references: [id])
}

model Review {
    id        String   @id @default(cuid())
    rating    Int // 1-5
    comment   String?
    createdAt DateTime @default(now())

    // Relations
    userId String
    user   User   @relation(fields: [userId], references: [id])

    targetUserId String
    targetUser   User   @relation("ReviewedUser", fields: [targetUserId], references: [id])
}

model Location {
    id      String @id @default(cuid())
    city    String
    country String
    lat     Float?
    lng     Float?

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])
}

enum ListingStatus {
    ACTIVE
    INACTIVE
    TRADED
}
